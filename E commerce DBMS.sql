-- Create Database
CREATE DATABASE ECommerce;
USE ECommerce;

--  Create Tables
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Email VARCHAR(100) UNIQUE
);

CREATE TABLE Products (
    ProductID INT PRIMARY KEY AUTO_INCREMENT,
    ProductName VARCHAR(100) NOT NULL,
    Price DECIMAL(10, 2) NOT NULL
);

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT,
    OrderDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY AUTO_INCREMENT,
    OrderID INT,
    ProductID INT,
    Quantity INT,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

-- Insert Data
INSERT INTO Customers (FirstName, LastName, Email) VALUES 
('Alice', 'Johnson', 'alice@example.com'),
('Bob', 'Brown', 'bob@example.com'),
('Charlie', 'Davis', 'charlie@example.com');

INSERT INTO Products (ProductName, Price) VALUES 
('Laptop', 1200.00), 
('Smartphone', 800.00), 
('Headphones', 150.00);

INSERT INTO Orders (CustomerID, OrderDate) VALUES 
(1, '2023-10-01'), 
(2, '2023-10-02'), 
(3, '2023-10-03');

INSERT INTO OrderDetails (OrderID, ProductID, Quantity) VALUES 
(1, 1, 1), 
(2, 2, 2), 
(3, 3, 3);

--  Queries
-- Find all orders placed by Alice Johnson
SELECT Orders.OrderID, Orders.OrderDate, Customers.FirstName, Customers.LastName
FROM Orders
JOIN Customers ON Orders.CustomerID = Customers.CustomerID
WHERE Customers.FirstName = 'Alice' AND Customers.LastName = 'Johnson';

-- Find the total revenue generated by each product
SELECT Products.ProductName, SUM(OrderDetails.Quantity * Products.Price) AS TotalRevenue
FROM OrderDetails
JOIN Products ON OrderDetails.ProductID = Products.ProductID
GROUP BY Products.ProductName;

-- Find customers who have placed more than 2 orders
SELECT Customers.FirstName, Customers.LastName, COUNT(Orders.OrderID) AS TotalOrders
FROM Orders
JOIN Customers ON Orders.CustomerID = Customers.CustomerID
GROUP BY Customers.CustomerID
HAVING TotalOrders > 2;

-- Find the total revenue generated in October 2023
SELECT SUM(OrderDetails.Quantity * Products.Price) AS TotalRevenue
FROM OrderDetails
JOIN Products ON OrderDetails.ProductID = Products.ProductID
JOIN Orders ON OrderDetails.OrderID = Orders.OrderID
WHERE Orders.OrderDate BETWEEN '2023-10-01' AND '2023-10-31';

-- Find products that have never been ordered
SELECT ProductName
FROM Products
LEFT JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID
WHERE OrderDetails.OrderID IS NULL;

-- Find the customer who spent the most money
SELECT Customers.FirstName, Customers.LastName, SUM(OrderDetails.Quantity * Products.Price) AS TotalSpent
FROM OrderDetails
JOIN Orders ON OrderDetails.OrderID = Orders.OrderID
JOIN Customers ON Orders.CustomerID = Customers.CustomerID
JOIN Products ON OrderDetails.ProductID = Products.ProductID
GROUP BY Customers.CustomerID
ORDER BY TotalSpent DESC
LIMIT 1;

-- Find the average order value
SELECT AVG(OrderDetails.Quantity * Products.Price) AS AverageOrderValue
FROM OrderDetails
JOIN Products ON OrderDetails.ProductID = Products.ProductID;